{
  "contractName": "TonMinter",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "creolSuper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"creolSuper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Joshua Bijak\",\"details\":\"Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"TonMinter\"},\"userdoc\":{\"methods\":{\"constructor\":\"______                _   _                  |  ____|              | | (_)                 | |__ _   _ _ __   ___| |_ _  ___  _ __  ___  |  __| | | | '_ \\\\ / __| __| |/ _ \\\\| '_ \\\\/ __| | |  | |_| | | | | (__| |_| | (_) | | | \\\\__ \\\\ |_|   \\\\__,_|_| |_|\\\\___|\\\\__|_|\\\\___/|_| |_|___/\"},\"notice\":\"Prototype Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg  \"}},\"settings\":{\"compilationTarget\":{\"/d/Repos/creol-io/ECS-TonMinter/contracts/TonMinter.sol\":\"TonMinter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/d/Repos/creol-io/ECS-TonMinter/contracts/CarbonVCUInterface.sol\":{\"keccak256\":\"0x0ed2fbdf2cee18df92b11962db8a5cf47cc9370a37d9d7cef1691e0534891cae\",\"urls\":[\"bzz-raw://9043b55d7e38488bf81c7c9c9f7c7f8fb4ee20047ab3a5a258af07c7027582a9\",\"dweb:/ipfs/QmRmVQLYj2eLe1mCNdkjE2ZoseZQHWcXgSKh8ix5HrHvvf\"]},\"/d/Repos/creol-io/ECS-TonMinter/contracts/TonMinter.sol\":{\"keccak256\":\"0x28da61d831a641771596a6417c0afba7c99faf0fee07c9d4767046bd63bedce7\",\"urls\":[\"bzz-raw://280d13b40965a652431afffe2f5cc2094dde20548ca2af88bff26dbd213c10d1\",\"dweb:/ipfs/QmVWJTo6g5cPDVRaDC6rGX5JJcicxsPyEynRsjcQJqSFnC\"]},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\",\"urls\":[\"bzz-raw://1332ee1d2b096456bf2e5795b5871d0fed47be6a31c9a2f2cef9206a299565ea\",\"dweb:/ipfs/Qmdu1847Y4UL3gTjbLUManMGfxYEoyGPSodM3Br89SKzwx\"]},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\",\"urls\":[\"bzz-raw://5cf7c208583d4d046d75bd99f5507412ab01cce9dd9f802ce9768a416d93ea2f\",\"dweb:/ipfs/QmcQS1BBMPpVEkXP3qzwSjxHNrqDek8YeR7xbVWDC9ApC7\"]},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\",\"urls\":[\"bzz-raw://b3115459376196d6c2c3817439c169d9b052b27b70e8ee2e28963cda760736da\",\"dweb:/ipfs/QmXaNF5rmcDSAzBiFMQjf979qb9xNXqD9eZtgo4uM9VEis\"]},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\",\"urls\":[\"bzz-raw://b0167043c1938b56904deaa481a73041aa4a9e054c60db0b0dfbebfe7869c06a\",\"dweb:/ipfs/QmUoYjhymBr6WUpExKgRvKxXD5fcdpQEe1o9ResKZu6CC5\"]},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\",\"urls\":[\"bzz-raw://e7e8b526a6839e5ba14f0d23a830387fec47f7043ce01d42c9f285b709a9d080\",\"dweb:/ipfs/QmXmhhFmX5gcAvVzNiDPAGA35iHMPNaYtQkACswRHBVTNw\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x734b5bedb78074a59bca6aff9e5a1801c9c7e9c5314daf32e14857161fb36932\",\"urls\":[\"bzz-raw://4574e71185f6693eb5cdf7a5126fba97caf0ec0366b08290dd361af44b3414d3\",\"dweb:/ipfs/QmTPBh1R3EU973H7h6D1kQ1XBA1oX2QdSHZACyytWUYKsn\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0xf81dbd00ad4a1e4795df72759e33872c2599ea6c060be5898ed5d6fcd8ee9a11\",\"urls\":[\"bzz-raw://44dfcc25314c5ed29bc069c4746f87d98bb30a8dbc1a9bdeb797c2a530b9b9c5\",\"dweb:/ipfs/QmbRc5bKDobjE6zamLUy6Sh5HKd6XtNAsfBJzgZuQB3jpv\"]},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xa17f4147965ceccd9f2017b14fcf8ef142346ec69c7e0424fd5c99f5ffeed8fa\",\"urls\":[\"bzz-raw://25315aea456015e8a2bc2b5badde793d1ae16d67d09df50ecb90a2af13674b92\",\"dweb:/ipfs/QmTujwcp5f1LioDNdRMfsXs2MsCWu2UeijhEg4VnDbzZmk\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506102ea806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806337800b2214610051578063715018a6146100755780638da5cb5b1461007f578063f2fde38b14610087575b600080fd5b6100596100ad565b604080516001600160a01b039092168252519081900360200190f35b61007d6100bc565b005b610059610170565b61007d6004803603602081101561009d57600080fd5b50356001600160a01b031661017f565b6097546001600160a01b031681565b6100c461028a565b6065546001600160a01b03908116911614610126576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b61018761028a565b6065546001600160a01b039081169116146101e9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661022e5760405162461bcd60e51b815260040180806020018281038252602681526020018061028f6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212208ce97b826ad37c6d18a7781be8b2c8449226a4cce9d1f1b0c1a7191b3d8fe36c64736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806337800b2214610051578063715018a6146100755780638da5cb5b1461007f578063f2fde38b14610087575b600080fd5b6100596100ad565b604080516001600160a01b039092168252519081900360200190f35b61007d6100bc565b005b610059610170565b61007d6004803603602081101561009d57600080fd5b50356001600160a01b031661017f565b6097546001600160a01b031681565b6100c461028a565b6065546001600160a01b03908116911614610126576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b61018761028a565b6065546001600160a01b039081169116146101e9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661022e5760405162461bcd60e51b815260040180806020018281038252602681526020018061028f6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212208ce97b826ad37c6d18a7781be8b2c8449226a4cce9d1f1b0c1a7191b3d8fe36c64736f6c63430006020033",
  "sourceMap": "2466:2017:2:-:0;;;4038:40;8:9:-1;5:2;;;30:1;27;20:12;5:2;4038:40:2;2466:2017;;;;;;",
  "deployedSourceMap": "2466:2017:2:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2466:2017:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3201:25;;;:::i;:::-;;;;-1:-1:-1;;;;;3201:25:2;;;;;;;;;;;;;;1894:145:5;;;:::i;:::-;;1271:77;;;:::i;2188:240::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2188:240:5;-1:-1:-1;;;;;2188:240:5;;:::i;3201:25:2:-;;;-1:-1:-1;;;;;3201:25:2;;:::o;1894:145:5:-;1485:12;:10;:12::i;:::-;1475:6;;-1:-1:-1;;;;;1475:6:5;;;:22;;;1467:67;;;;;-1:-1:-1;;;1467:67:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1984:6:::1;::::0;1963:40:::1;::::0;2000:1:::1;::::0;-1:-1:-1;;;;;1984:6:5::1;::::0;1963:40:::1;::::0;2000:1;;1963:40:::1;2013:6;:19:::0;;-1:-1:-1;;;;;;2013:19:5::1;::::0;;1894:145::o;1271:77::-;1335:6;;-1:-1:-1;;;;;1335:6:5;1271:77;:::o;2188:240::-;1485:12;:10;:12::i;:::-;1475:6;;-1:-1:-1;;;;;1475:6:5;;;:22;;;1467:67;;;;;-1:-1:-1;;;1467:67:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2276:22:5;::::1;2268:73;;;;-1:-1:-1::0;;;2268:73:5::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2377:6;::::0;2356:38:::1;::::0;-1:-1:-1;;;;;2356:38:5;;::::1;::::0;2377:6:::1;::::0;2356:38:::1;::::0;2377:6:::1;::::0;2356:38:::1;2404:6;:17:::0;;-1:-1:-1;;;;;;2404:17:5::1;-1:-1:-1::0;;;;;2404:17:5;;;::::1;::::0;;;::::1;::::0;;2188:240::o;931:104:3:-;1018:10;931:104;:::o",
  "source": "/*\n  @title TonMinter v0.0.1\n ________  ________  _______   ________  ___          \n|\\   ____\\|\\   __  \\|\\  ___ \\ |\\   __  \\|\\  \\         \n\\ \\  \\___|\\ \\  \\|\\  \\ \\   __/|\\ \\  \\|\\  \\ \\  \\        \n \\ \\  \\    \\ \\   _  _\\ \\  \\_|/_\\ \\  \\\\\\  \\ \\  \\       \n  \\ \\  \\____\\ \\  \\\\  \\\\ \\  \\_|\\ \\ \\  \\\\\\  \\ \\  \\____  \n   \\ \\_______\\ \\__\\\\ _\\\\ \\_______\\ \\_______\\ \\_______\\\n    \\|_______|\\|__|\\|__|\\|_______|\\|_______|\\|_______|\n                                             \n \n \n\n  _______          __  __ _       _            \n |__   __|        |  \\/  (_)     | |           \n    | | ___  _ __ | \\  / |_ _ __ | |_ ___ _ __ \n    | |/ _ \\| '_ \\| |\\/| | | '_ \\| __/ _ \\ '__|\n    | | (_) | | | | |  | | | | | | ||  __/ |   \n    |_|\\___/|_| |_|_|  |_|_|_| |_|\\__\\___|_|   \n                                               \n                                               \n                        \nAuthor:      Joshua Bijak\nDate:        April 09, 2021\nTitle:       TonMinter Prototype\nDescription: Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n              \n  ___                            _       \n|_ _|_ __ ___  _ __   ___  _ __| |_ ___ \n | || '_ ` _ \\| '_ \\ / _ \\| '__| __/ __|\n | || | | | | | |_) | (_) | |  | |_\\__ \\\n|___|_| |_| |_| .__/ \\___/|_|   \\__|___/\n              |_|                       \n\n*/\npragma solidity ^0.6.2;\n\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\";\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\";\n\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\nimport \"./CarbonVCUInterface.sol\";\n/*\n  _____            _                  _   \n / ____|          | |                | |  \n| |     ___  _ __ | |_ _ __ __ _  ___| |_ \n| |    / _ \\| '_ \\| __| '__/ _` |/ __| __|\n| |___| (_) | | | | |_| | | (_| | (__| |_ \n \\_____\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|\n\n*/\n/**\n * @author Joshua Bijak\n * @title TonMinter\n * @dev  Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n * @notice Prototype Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n * \n */\ncontract TonMinter is Initializable, OwnableUpgradeSafe {\n    \n    /**\n     * \n          ______               _       \n         |  ____|             | |      \n         | |____   _____ _ __ | |_ ___ \n         |  __\\ \\ / / _ \\ '_ \\| __/ __|\n         | |___\\ V /  __/ | | | |_\\__ \\\n         |______\\_/ \\___|_| |_|\\__|___/\n                                       \n     * \n     * \n     */\n\n   \n    \n        \n    /**\n     * \n     *    _____ _        _   _          \n         / ____| |      | | (_)         \n        | (___ | |_ __ _| |_ _  ___ ___ \n         \\___ \\| __/ _` | __| |/ __/ __|\n         ____) | || (_| | |_| | (__\\__ \\\n        |_____/ \\__\\__,_|\\__|_|\\___|___/\n     * \n     * \n     */\n     \n    using SafeMath for uint256;\n    \n    address public creolSuper;\n    \n    /**\n     *   __  __           _ _  __ _               \n        |  \\/  |         | (_)/ _(_)              \n        | \\  / | ___   __| |_| |_ _  ___ _ __ ___ \n        | |\\/| |/ _ \\ / _` | |  _| |/ _ \\ '__/ __|\n        | |  | | (_) | (_| | | | | |  __/ |  \\__ \\\n        |_|  |_|\\___/ \\__,_|_|_| |_|\\___|_|  |___/\n        \n    */\n    modifier onlyCreolSuper(){\n        require(msg.sender == creolSuper);\n        _;\n    }\n    \n   \n     \n     /**\n      *   ______                _   _                 \n         |  ____|              | | (_)                \n         | |__ _   _ _ __   ___| |_ _  ___  _ __  ___ \n         |  __| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\n         | |  | |_| | | | | (__| |_| | (_) | | | \\__ \\\n         |_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/\n     */\n     \n    \n     \n     constructor () public {\n         \n     }\n\n/**\n * \n * \n *   _                      _ \n    | |                    | |\n    | |     ___  __ _  __ _| |\n    | |    / _ \\/ _` |/ _` | |\n    | |___|  __/ (_| | (_| | |\n    |______\\___|\\__, |\\__,_|_|\n                 __/ |        \n                |___/    \n * \n * They come with no warranty and are not for use in a production setting. For production usage, please contact joshua.bijak@creol.io\n * \n */\n }\n \n",
  "sourcePath": "/d/Repos/creol-io/ECS-TonMinter/contracts/TonMinter.sol",
  "ast": {
    "absolutePath": "/d/Repos/creol-io/ECS-TonMinter/contracts/TonMinter.sol",
    "exportedSymbols": {
      "TonMinter": [
        76
      ]
    },
    "id": 77,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 44,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "1336:23:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol",
        "id": 45,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 616,
        "src": "1362:85:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol",
        "id": 46,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 666,
        "src": "1448:93:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol",
        "id": 47,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 643,
        "src": "1542:95:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol",
        "id": 48,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 326,
        "src": "1639:86:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol",
        "id": 49,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 316,
        "src": "1728:79:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
        "file": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
        "id": 50,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 513,
        "src": "1808:78:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/d/Repos/creol-io/ECS-TonMinter/contracts/CarbonVCUInterface.sol",
        "file": "./CarbonVCUInterface.sol",
        "id": 51,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 10,
        "src": "1888:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 52,
              "name": "Initializable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 191,
              "src": "2488:13:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Initializable_$191",
                "typeString": "contract Initializable"
              }
            },
            "id": 53,
            "nodeType": "InheritanceSpecifier",
            "src": "2488:13:2"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 54,
              "name": "OwnableUpgradeSafe",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 315,
              "src": "2503:18:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_OwnableUpgradeSafe_$315",
                "typeString": "contract OwnableUpgradeSafe"
              }
            },
            "id": 55,
            "nodeType": "InheritanceSpecifier",
            "src": "2503:18:2"
          }
        ],
        "contractDependencies": [
          121,
          191,
          315
        ],
        "contractKind": "contract",
        "documentation": "@author Joshua Bijak\n@title TonMinter\n@dev  Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n@notice Prototype Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n\n ",
        "fullyImplemented": true,
        "id": 76,
        "linearizedBaseContracts": [
          76,
          315,
          121,
          191
        ],
        "name": "TonMinter",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 58,
            "libraryName": {
              "contractScope": null,
              "id": 56,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 512,
              "src": "3170:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$512",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "3164:27:2",
            "typeName": {
              "id": 57,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "3183:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "37800b22",
            "id": 60,
            "name": "creolSuper",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 76,
            "src": "3201:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 59,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "3201:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 70,
              "nodeType": "Block",
              "src": "3592:61:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 66,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 63,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3610:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 64,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3610:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 65,
                          "name": "creolSuper",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60,
                          "src": "3624:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3610:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 62,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3602:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3602:33:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "3602:33:2"
                },
                {
                  "id": 69,
                  "nodeType": "PlaceholderStatement",
                  "src": "3645:1:2"
                }
              ]
            },
            "documentation": "  __  __           _ _  __ _               \n|  \\/  |         | (_)/ _(_)              \n| \\  / | ___   __| |_| |_ _  ___ _ __ ___ \n| |\\/| |/ _ \\ / _` | |  _| |/ _ \\ '__/ __|\n| |  | | (_) | (_| | | | | |  __/ |  \\__ \\\n|_|  |_|\\___/ \\__,_|_|_| |_|\\___|_|  |___/",
            "id": 71,
            "name": "onlyCreolSuper",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3590:2:2"
            },
            "src": "3567:86:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "4060:18:2",
              "statements": []
            },
            "documentation": "  ______                _   _                 \n|  ____|              | | (_)                \n| |__ _   _ _ __   ___| |_ _  ___  _ __  ___ \n|  __| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\n| |  | |_| | | | | (__| |_| | (_) | | | \\__ \\\n|_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/",
            "id": 75,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 72,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4050:2:2"
            },
            "returnParameters": {
              "id": 73,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4060:0:2"
            },
            "scope": 76,
            "src": "4038:40:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 77,
        "src": "2466:2017:2"
      }
    ],
    "src": "1336:3150:2"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/d/Repos/creol-io/ECS-TonMinter/contracts/TonMinter.sol",
      "exportedSymbols": {
        "TonMinter": [
          76
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.6",
            ".2"
          ]
        },
        "id": 44,
        "name": "PragmaDirective",
        "src": "1336:23:2"
      },
      {
        "attributes": {
          "SourceUnit": 616,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 45,
        "name": "ImportDirective",
        "src": "1362:85:2"
      },
      {
        "attributes": {
          "SourceUnit": 666,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 46,
        "name": "ImportDirective",
        "src": "1448:93:2"
      },
      {
        "attributes": {
          "SourceUnit": 643,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 47,
        "name": "ImportDirective",
        "src": "1542:95:2"
      },
      {
        "attributes": {
          "SourceUnit": 326,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 48,
        "name": "ImportDirective",
        "src": "1639:86:2"
      },
      {
        "attributes": {
          "SourceUnit": 316,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 49,
        "name": "ImportDirective",
        "src": "1728:79:2"
      },
      {
        "attributes": {
          "SourceUnit": 513,
          "absolutePath": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
          "file": "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 50,
        "name": "ImportDirective",
        "src": "1808:78:2"
      },
      {
        "attributes": {
          "SourceUnit": 10,
          "absolutePath": "/d/Repos/creol-io/ECS-TonMinter/contracts/CarbonVCUInterface.sol",
          "file": "./CarbonVCUInterface.sol",
          "scope": 77,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 51,
        "name": "ImportDirective",
        "src": "1888:34:2"
      },
      {
        "attributes": {
          "abstract": false,
          "contractDependencies": [
            121,
            191,
            315
          ],
          "contractKind": "contract",
          "documentation": "@author Joshua Bijak\n@title TonMinter\n@dev  Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n@notice Prototype Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg\n\n ",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            76,
            315,
            121,
            191
          ],
          "name": "TonMinter",
          "scope": 77
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "Initializable",
                  "referencedDeclaration": 191,
                  "type": "contract Initializable"
                },
                "id": 52,
                "name": "UserDefinedTypeName",
                "src": "2488:13:2"
              }
            ],
            "id": 53,
            "name": "InheritanceSpecifier",
            "src": "2488:13:2"
          },
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "OwnableUpgradeSafe",
                  "referencedDeclaration": 315,
                  "type": "contract OwnableUpgradeSafe"
                },
                "id": 54,
                "name": "UserDefinedTypeName",
                "src": "2503:18:2"
              }
            ],
            "id": 55,
            "name": "InheritanceSpecifier",
            "src": "2503:18:2"
          },
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "SafeMath",
                  "referencedDeclaration": 512,
                  "type": "library SafeMath"
                },
                "id": 56,
                "name": "UserDefinedTypeName",
                "src": "3170:8:2"
              },
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 57,
                "name": "ElementaryTypeName",
                "src": "3183:7:2"
              }
            ],
            "id": 58,
            "name": "UsingForDirective",
            "src": "3164:27:2"
          },
          {
            "attributes": {
              "constant": false,
              "functionSelector": "37800b22",
              "name": "creolSuper",
              "overrides": null,
              "scope": 76,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "address",
              "value": null,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "name": "address",
                  "stateMutability": "nonpayable",
                  "type": "address"
                },
                "id": 59,
                "name": "ElementaryTypeName",
                "src": "3201:7:2"
              }
            ],
            "id": 60,
            "name": "VariableDeclaration",
            "src": "3201:25:2"
          },
          {
            "attributes": {
              "documentation": "  __  __           _ _  __ _               \n|  \\/  |         | (_)/ _(_)              \n| \\  / | ___   __| |_| |_ _  ___ _ __ ___ \n| |\\/| |/ _ \\ / _` | |  _| |/ _ \\ '__/ __|\n| |  | | (_) | (_| | | | | |  __/ |  \\__ \\\n|_|  |_|\\___/ \\__,_|_|_| |_|\\___|_|  |___/",
              "name": "onlyCreolSuper",
              "overrides": null,
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 61,
                "name": "ParameterList",
                "src": "3590:2:2"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "tryCall": false,
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              ],
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "type": "function (bool) pure",
                              "value": "require"
                            },
                            "id": 62,
                            "name": "Identifier",
                            "src": "3602:7:2"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "==",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "member_name": "sender",
                                  "referencedDeclaration": null,
                                  "type": "address payable"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "overloadedDeclarations": [
                                        null
                                      ],
                                      "referencedDeclaration": -15,
                                      "type": "msg",
                                      "value": "msg"
                                    },
                                    "id": 63,
                                    "name": "Identifier",
                                    "src": "3610:3:2"
                                  }
                                ],
                                "id": 64,
                                "name": "MemberAccess",
                                "src": "3610:10:2"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 60,
                                  "type": "address",
                                  "value": "creolSuper"
                                },
                                "id": 65,
                                "name": "Identifier",
                                "src": "3624:10:2"
                              }
                            ],
                            "id": 66,
                            "name": "BinaryOperation",
                            "src": "3610:24:2"
                          }
                        ],
                        "id": 67,
                        "name": "FunctionCall",
                        "src": "3602:33:2"
                      }
                    ],
                    "id": 68,
                    "name": "ExpressionStatement",
                    "src": "3602:33:2"
                  },
                  {
                    "id": 69,
                    "name": "PlaceholderStatement",
                    "src": "3645:1:2"
                  }
                ],
                "id": 70,
                "name": "Block",
                "src": "3592:61:2"
              }
            ],
            "id": 71,
            "name": "ModifierDefinition",
            "src": "3567:86:2"
          },
          {
            "attributes": {
              "documentation": "  ______                _   _                 \n|  ____|              | | (_)                \n| |__ _   _ _ __   ___| |_ _  ___  _ __  ___ \n|  __| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\n| |  | |_| | | | | (__| |_| | (_) | | | \\__ \\\n|_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/",
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "modifiers": [
                null
              ],
              "name": "",
              "overrides": null,
              "scope": 76,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 72,
                "name": "ParameterList",
                "src": "4050:2:2"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 73,
                "name": "ParameterList",
                "src": "4060:0:2"
              },
              {
                "attributes": {
                  "statements": [
                    null
                  ]
                },
                "children": [],
                "id": 74,
                "name": "Block",
                "src": "4060:18:2"
              }
            ],
            "id": 75,
            "name": "FunctionDefinition",
            "src": "4038:40:2"
          }
        ],
        "id": 76,
        "name": "ContractDefinition",
        "src": "2466:2017:2"
      }
    ],
    "id": 77,
    "name": "SourceUnit",
    "src": "1336:3150:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-04-09T23:38:19.282Z",
  "devdoc": {
    "author": "Joshua Bijak",
    "details": "Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "TonMinter"
  },
  "userdoc": {
    "methods": {
      "constructor": "______                _   _                  |  ____|              | | (_)                 | |__ _   _ _ __   ___| |_ _  ___  _ __  ___  |  __| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __| | |  | |_| | | | | (__| |_| | (_) | | | \\__ \\ |_|   \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/"
    },
    "notice": "Prototype Contract that accepts signed proofs of a IoT Cookstove and mints an NFT ton when it hits 1000kg  "
  }
}